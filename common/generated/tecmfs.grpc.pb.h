// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tecmfs.proto
#ifndef GRPC_tecmfs_2eproto__INCLUDED
#define GRPC_tecmfs_2eproto__INCLUDED

#include "tecmfs.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tecmfs {

class DiskService final {
 public:
  static constexpr char const* service_full_name() {
    return "tecmfs.DiskService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Ping(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::tecmfs::PingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    virtual ::grpc::Status WriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::tecmfs::BlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>> AsyncWriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>>(AsyncWriteBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>> PrepareAsyncWriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>>(PrepareAsyncWriteBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status ReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::tecmfs::BlockData* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockData>> AsyncReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockData>>(AsyncReadBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockData>> PrepareAsyncReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockData>>(PrepareAsyncReadBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::tecmfs::BlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>> AsyncDeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>>(AsyncDeleteBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>> PrepareAsyncDeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>>(PrepareAsyncDeleteBlockRaw(context, request, cq));
    }
    // ← ¡Nuevo método!
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Ping(::grpc::ClientContext* context, const ::tecmfs::PingRequest* request, ::tecmfs::PingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Ping(::grpc::ClientContext* context, const ::tecmfs::PingRequest* request, ::tecmfs::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest* request, ::tecmfs::BlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void WriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest* request, ::tecmfs::BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockData* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockData* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ← ¡Nuevo método!
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>* AsyncWriteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>* PrepareAsyncWriteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockData>* AsyncReadBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockData>* PrepareAsyncReadBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>* AsyncDeleteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tecmfs::BlockResponse>* PrepareAsyncDeleteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Ping(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::tecmfs::PingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::PingResponse>> AsyncPing(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::PingResponse>>(AsyncPingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::PingResponse>> PrepareAsyncPing(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::PingResponse>>(PrepareAsyncPingRaw(context, request, cq));
    }
    ::grpc::Status WriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::tecmfs::BlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>> AsyncWriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>>(AsyncWriteBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>> PrepareAsyncWriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>>(PrepareAsyncWriteBlockRaw(context, request, cq));
    }
    ::grpc::Status ReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::tecmfs::BlockData* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockData>> AsyncReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockData>>(AsyncReadBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockData>> PrepareAsyncReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockData>>(PrepareAsyncReadBlockRaw(context, request, cq));
    }
    ::grpc::Status DeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::tecmfs::BlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>> AsyncDeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>>(AsyncDeleteBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>> PrepareAsyncDeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>>(PrepareAsyncDeleteBlockRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Ping(::grpc::ClientContext* context, const ::tecmfs::PingRequest* request, ::tecmfs::PingResponse* response, std::function<void(::grpc::Status)>) override;
      void Ping(::grpc::ClientContext* context, const ::tecmfs::PingRequest* request, ::tecmfs::PingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest* request, ::tecmfs::BlockResponse* response, std::function<void(::grpc::Status)>) override;
      void WriteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockRequest* request, ::tecmfs::BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockData* response, std::function<void(::grpc::Status)>) override;
      void ReadBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockData* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteBlock(::grpc::ClientContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tecmfs::PingResponse>* AsyncPingRaw(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tecmfs::PingResponse>* PrepareAsyncPingRaw(::grpc::ClientContext* context, const ::tecmfs::PingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>* AsyncWriteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>* PrepareAsyncWriteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockData>* AsyncReadBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockData>* PrepareAsyncReadBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>* AsyncDeleteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tecmfs::BlockResponse>* PrepareAsyncDeleteBlockRaw(::grpc::ClientContext* context, const ::tecmfs::BlockIndex& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Ping_;
    const ::grpc::internal::RpcMethod rpcmethod_WriteBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteBlock_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Ping(::grpc::ServerContext* context, const ::tecmfs::PingRequest* request, ::tecmfs::PingResponse* response);
    virtual ::grpc::Status WriteBlock(::grpc::ServerContext* context, const ::tecmfs::BlockRequest* request, ::tecmfs::BlockResponse* response);
    virtual ::grpc::Status ReadBlock(::grpc::ServerContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockData* response);
    virtual ::grpc::Status DeleteBlock(::grpc::ServerContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockResponse* response);
    // ← ¡Nuevo método!
  };
  template <class BaseClass>
  class WithAsyncMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Ping() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tecmfs::PingRequest* /*request*/, ::tecmfs::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::tecmfs::PingRequest* request, ::grpc::ServerAsyncResponseWriter< ::tecmfs::PingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WriteBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockRequest* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteBlock(::grpc::ServerContext* context, ::tecmfs::BlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::tecmfs::BlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadBlock() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadBlock(::grpc::ServerContext* context, ::tecmfs::BlockIndex* request, ::grpc::ServerAsyncResponseWriter< ::tecmfs::BlockData>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteBlock() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBlock(::grpc::ServerContext* context, ::tecmfs::BlockIndex* request, ::grpc::ServerAsyncResponseWriter< ::tecmfs::BlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Ping<WithAsyncMethod_WriteBlock<WithAsyncMethod_ReadBlock<WithAsyncMethod_DeleteBlock<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tecmfs::PingRequest, ::tecmfs::PingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tecmfs::PingRequest* request, ::tecmfs::PingResponse* response) { return this->Ping(context, request, response); }));}
    void SetMessageAllocatorFor_Ping(
        ::grpc::MessageAllocator< ::tecmfs::PingRequest, ::tecmfs::PingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tecmfs::PingRequest, ::tecmfs::PingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tecmfs::PingRequest* /*request*/, ::tecmfs::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::tecmfs::PingRequest* /*request*/, ::tecmfs::PingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WriteBlock() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tecmfs::BlockRequest, ::tecmfs::BlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tecmfs::BlockRequest* request, ::tecmfs::BlockResponse* response) { return this->WriteBlock(context, request, response); }));}
    void SetMessageAllocatorFor_WriteBlock(
        ::grpc::MessageAllocator< ::tecmfs::BlockRequest, ::tecmfs::BlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tecmfs::BlockRequest, ::tecmfs::BlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockRequest* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::tecmfs::BlockRequest* /*request*/, ::tecmfs::BlockResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadBlock() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::tecmfs::BlockIndex, ::tecmfs::BlockData>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockData* response) { return this->ReadBlock(context, request, response); }));}
    void SetMessageAllocatorFor_ReadBlock(
        ::grpc::MessageAllocator< ::tecmfs::BlockIndex, ::tecmfs::BlockData>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tecmfs::BlockIndex, ::tecmfs::BlockData>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockData* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteBlock() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::tecmfs::BlockIndex, ::tecmfs::BlockResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tecmfs::BlockIndex* request, ::tecmfs::BlockResponse* response) { return this->DeleteBlock(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteBlock(
        ::grpc::MessageAllocator< ::tecmfs::BlockIndex, ::tecmfs::BlockResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tecmfs::BlockIndex, ::tecmfs::BlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Ping<WithCallbackMethod_WriteBlock<WithCallbackMethod_ReadBlock<WithCallbackMethod_DeleteBlock<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Ping() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tecmfs::PingRequest* /*request*/, ::tecmfs::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WriteBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockRequest* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadBlock() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteBlock() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Ping() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tecmfs::PingRequest* /*request*/, ::tecmfs::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPing(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WriteBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockRequest* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWriteBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadBlock() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteBlock() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Ping() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Ping(context, request, response); }));
    }
    ~WithRawCallbackMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tecmfs::PingRequest* /*request*/, ::tecmfs::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Ping(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WriteBlock() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->WriteBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockRequest* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* WriteBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadBlock() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteBlock() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteBlock(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Ping : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Ping() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tecmfs::PingRequest, ::tecmfs::PingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tecmfs::PingRequest, ::tecmfs::PingResponse>* streamer) {
                       return this->StreamedPing(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Ping() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Ping(::grpc::ServerContext* /*context*/, const ::tecmfs::PingRequest* /*request*/, ::tecmfs::PingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPing(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tecmfs::PingRequest,::tecmfs::PingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_WriteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_WriteBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tecmfs::BlockRequest, ::tecmfs::BlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tecmfs::BlockRequest, ::tecmfs::BlockResponse>* streamer) {
                       return this->StreamedWriteBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_WriteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WriteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockRequest* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWriteBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tecmfs::BlockRequest,::tecmfs::BlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadBlock() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tecmfs::BlockIndex, ::tecmfs::BlockData>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tecmfs::BlockIndex, ::tecmfs::BlockData>* streamer) {
                       return this->StreamedReadBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockData* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tecmfs::BlockIndex,::tecmfs::BlockData>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteBlock() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tecmfs::BlockIndex, ::tecmfs::BlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tecmfs::BlockIndex, ::tecmfs::BlockResponse>* streamer) {
                       return this->StreamedDeleteBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteBlock(::grpc::ServerContext* /*context*/, const ::tecmfs::BlockIndex* /*request*/, ::tecmfs::BlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tecmfs::BlockIndex,::tecmfs::BlockResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_WriteBlock<WithStreamedUnaryMethod_ReadBlock<WithStreamedUnaryMethod_DeleteBlock<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Ping<WithStreamedUnaryMethod_WriteBlock<WithStreamedUnaryMethod_ReadBlock<WithStreamedUnaryMethod_DeleteBlock<Service > > > > StreamedService;
};

}  // namespace tecmfs


#endif  // GRPC_tecmfs_2eproto__INCLUDED
